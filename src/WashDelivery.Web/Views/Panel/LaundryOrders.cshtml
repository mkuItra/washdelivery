@using WashDelivery.Domain.Enums
@using WashDelivery.Domain.Constants
@using WashDelivery.Web.Helpers
@model WashDelivery.Web.ViewModels.Orders.LaundryOrderListViewModel

@{
    ViewData["Title"] = "Zamówienia";

    string GetStatusStyle(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Delivered => "bg-green-50 text-green-700 ring-green-600/20",
            OrderStatus.Cancelled => "bg-red-50 text-red-700 ring-red-600/20",
            OrderStatus.PendingLaundryAssignment => "bg-yellow-50 text-yellow-800 ring-yellow-600/20",
            OrderStatus.InLaundry => "bg-blue-50 text-blue-700 ring-blue-700/10",
            OrderStatus.PickedUp => "bg-indigo-50 text-indigo-700 ring-indigo-700/10",
            OrderStatus.OutForDelivery => "bg-orange-50 text-orange-700 ring-orange-600/20",
            _ => "bg-gray-50 text-gray-600 ring-gray-500/10"
        };
    }
}

@Html.AntiForgeryToken()

<div class="bg-white">
    <div class="mx-auto max-w-7xl px-4 py-16 sm:px-6 lg:px-8">
        <div class="mx-auto max-w-2xl lg:max-w-none">

            <!-- Pending Orders -->
            <div class="mt-6">
                <h3 class="text-lg font-medium text-gray-900">Oczekujące na akceptację</h3>
                @if (!Model.IsActive)
                {
                    <div class="mt-2 rounded-md bg-yellow-50 p-4">
                        <div class="flex">
                            <div class="flex-shrink-0">
                                <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M8.485 2.495c.673-1.167 2.357-1.167 3.03 0l6.28 10.875c.673 1.167-.17 2.625-1.516 2.625H3.72c-1.347 0-2.189-1.458-1.515-2.625L8.485 2.495zM10 5a.75.75 0 01.75.75v3.5a.75.75 0 01-1.5 0v-3.5A.75.75 0 0110 5zm0 9a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
                                </svg>
                            </div>
                            <div class="ml-3">
                                <p class="text-sm text-yellow-700">
                                    Pralnia jest obecnie nieaktywna. Nowe zamówienia nie będą przychodzić dopóki nie aktywujesz pralni.
                                </p>
                            </div>
                        </div>
                    </div>
                }
                <div id="pendingOrdersList" class="mt-4 space-y-4">
                    @foreach (var order in Model.PendingOrders)
                    {
                        <div class="bg-white shadow overflow-hidden sm:rounded-lg border border-gray-200" data-order-id="@order.Id">
                            <div class="px-4 py-5 sm:px-6">
                                <div class="flex justify-between items-center">
                                    <div>
                                        <h4 class="text-lg font-medium text-gray-900">Zamówienie #@order.Id</h4>
                                        <p class="mt-1 text-sm text-gray-500">
                                            Odbiór: @DateTimeHelper.FormatToLocalTime(order.PickupTime)
                                        </p>
                                    </div>
                                    <div class="flex space-x-3">
                                        <form method="post" action="/Panel/LaundryOrders" class="inline">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="handler" value="Accept" />
                                            <input type="hidden" name="id" value="@order.Id" />
                                            <button type="submit" 
                                                    class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700">
                                                Akceptuj
                                            </button>
                                        </form>
                                        <form method="post" action="/Panel/LaundryOrders" class="inline">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="handler" value="Decline" />
                                            <input type="hidden" name="id" value="@order.Id" />
                                            <button type="submit" 
                                                    class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50">
                                                Odrzuć
                                            </button>
                                        </form>
                                    </div>
                                </div>
                                <div class="mt-4">
                                    <div class="text-sm text-gray-600">
                                        <div class="font-medium text-gray-900 mb-2">Zamówione usługi:</div>
                                        <ul class="list-disc pl-5 space-y-1">
                                            @foreach (var item in order.Items)
                                            {
                                                <li>@item.Name - @item.Quantity szt. @(item.Weight.HasValue ? $"({item.Weight} kg)" : "") - @item.Price.ToString("C")</li>
                                            }
                                        </ul>
                                        <div class="mt-3">
                                            <span class="font-medium text-gray-900">Adres odbioru:</span>
                                            <div>@order.PickupAddress.Street @(order.PickupAddress.ApartmentNumber != null ? $", m. {order.PickupAddress.ApartmentNumber}" : "")</div>
                                            <div>@order.PickupAddress.PostalCode @order.PickupAddress.City</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    @if (!Model.PendingOrders.Any())
                    {
                        <p id="noPendingOrders" class="text-gray-500 text-sm">Brak oczekujących zamówień</p>
                    }
                </div>
            </div>

            <!-- In Transit Orders -->
            <div class="mt-10">
                <h3 class="text-lg font-medium text-gray-900">W transporcie</h3>
                <div class="mt-4 space-y-4">
                    @foreach (var order in Model.InTransitOrders)
                    {
                        <div class="bg-white shadow overflow-hidden sm:rounded-lg border border-gray-200">
                            <div class="px-4 py-5 sm:px-6">
                                <div class="flex justify-between items-center">
                                    <div>
                                        <h4 class="text-lg font-medium text-gray-900">Zamówienie #@order.Id</h4>
                                        <div class="mt-1">
                                            <span class="inline-flex items-center rounded-md px-2 py-1 text-xs font-medium ring-1 ring-inset @GetStatusStyle(order.Status)">
                                                @OrderStatusDisplayNames.GetDisplayName(order.Status)
                                            </span>
                                        </div>
                                    </div>
                                    <div class="flex space-x-3">
                                        @if (order.Status == OrderStatus.PickedUp)
                                        {
                                            <form asp-action="ConfirmArrival" asp-controller="Order" method="post">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="orderId" value="@order.Id" />
                                                <button type="submit"
                                                    class="rounded-md bg-green-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-green-500">
                                                    Potwierdź odbiór w pralni
                                                </button>
                                            </form>
                                        }
                                    </div>
                                </div>
                                <div class="mt-4">
                                    <div class="text-sm text-gray-600">
                                        <div class="font-medium text-gray-900 mb-2">Zamówione usługi:</div>
                                        <ul class="list-disc pl-5 space-y-1">
                                            @foreach (var item in order.Items)
                                            {
                                                <li>@item.Name - @item.Quantity szt. @(item.Weight.HasValue ? $"({item.Weight} kg)" : "") - @item.Price.ToString("C")</li>
                                            }
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    @if (!Model.InTransitOrders.Any())
                    {
                        <p class="text-gray-500 text-sm">Brak zamówień w transporcie</p>
                    }
                </div>
            </div>

            <!-- In Progress Orders -->
            <div class="mt-10">
                <h3 class="text-lg font-medium text-gray-900">W realizacji</h3>
                <div class="mt-4 space-y-4">
                    @foreach (var order in Model.InProgressOrders)
                    {
                        <div class="bg-white shadow overflow-hidden sm:rounded-lg border border-gray-200">
                            <div class="px-4 py-5 sm:px-6">
                                <div class="flex justify-between items-center">
                                    <div>
                                        <h4 class="text-lg font-medium text-gray-900">Zamówienie #@order.Id</h4>
                                        <div class="mt-1">
                                            <span class="inline-flex items-center rounded-md px-2 py-1 text-xs font-medium ring-1 ring-inset @GetStatusStyle(order.Status)">
                                                @OrderStatusDisplayNames.GetDisplayName(order.Status)
                                            </span>
                                        </div>
                                    </div>
                                    <div class="flex space-x-3">
                                        @if (order.Status == OrderStatus.InLaundry)
                                        {
                                            <form asp-action="MarkAsReady" asp-controller="Order" method="post">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="orderId" value="@order.Id" />
                                                <button type="submit"
                                                    class="rounded-md bg-green-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-green-500">
                                                    Gotowe do odbioru
                                                </button>
                                            </form>
                                        }
                                    </div>
                                </div>
                                <div class="mt-4">
                                    <div class="text-sm text-gray-600">
                                        <div class="font-medium text-gray-900 mb-2">Zamówione usługi:</div>
                                        <ul class="list-disc pl-5 space-y-1">
                                            @foreach (var item in order.Items)
                                            {
                                                <li>@item.Name - @item.Quantity szt. @(item.Weight.HasValue ? $"({item.Weight} kg)" : "") - @item.Price.ToString("C")</li>
                                            }
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    @if (!Model.InProgressOrders.Any())
                    {
                        <p class="text-gray-500 text-sm">Brak zamówień w realizacji</p>
                    }
                </div>
            </div>

            <!-- Completed Orders -->
            <div class="mt-10">
                <h3 class="text-lg font-medium text-gray-900">Zakończone</h3>
                <div class="mt-4 space-y-4">
                    @foreach (var order in Model.CompletedOrders)
                    {
                        <div class="bg-white shadow overflow-hidden sm:rounded-lg border border-gray-200">
                            <div class="px-4 py-5 sm:px-6">
                                <div class="flex justify-between items-center">
                                    <div>
                                        <h4 class="text-lg font-medium text-gray-900">Zamówienie #@order.Id</h4>
                                        <div class="mt-1">
                                            <span class="inline-flex items-center rounded-md px-2 py-1 text-xs font-medium ring-1 ring-inset @GetStatusStyle(order.Status)">
                                                @OrderStatusDisplayNames.GetDisplayName(order.Status)
                                            </span>
                                        </div>
                                        <p class="mt-1 text-sm text-gray-500">
                                            @if (order.Status == OrderStatus.Delivered)
                                            {
                                                <text>Dostarczone: @DateTimeHelper.FormatToLocalTime(order.DeliveredAt.Value)</text>
                                            }
                                            else if (order.Status == OrderStatus.OutForDelivery)
                                            {
                                                <text>W drodze do klienta</text>
                                            }
                                        </p>
                                    </div>
                                </div>
                                <div class="mt-4">
                                    <div class="text-sm text-gray-600">
                                        <div class="font-medium text-gray-900 mb-2">Zamówione usługi:</div>
                                        <ul class="list-disc pl-5 space-y-1">
                                            @foreach (var item in order.Items)
                                            {
                                                <li>@item.Name - @item.Quantity szt. @(item.Weight.HasValue ? $"({item.Weight} kg)" : "") - @item.Price.ToString("C")</li>
                                            }
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    @if (!Model.CompletedOrders.Any())
                    {
                        <p class="text-gray-500 text-sm">Brak zakończonych zamówień</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Store when each order was first shown to this laundry in localStorage to persist across refreshes
        function getOrderFirstShownTime(orderId) {
            const key = `order_${orderId}_first_shown`;
            const stored = localStorage.getItem(key);
            if (!stored) {
                const now = new Date().toISOString();
                localStorage.setItem(key, now);
                return new Date(now);
            }
            return new Date(stored);
        }

        // Format date to match server-side format
        function formatDateTime(isoString) {
            const date = new Date(isoString);
            return new Intl.DateTimeFormat('pl-PL', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                hour12: false
            }).format(date);
        }

        // Remove expired order from the list with animation
        function removeExpiredOrder(orderId) {
            const orderElement = document.querySelector(`[data-order-id="${orderId}"]`);
            if (orderElement) {
                orderElement.style.transition = 'all 0.5s ease-out';
                orderElement.style.opacity = '0';
                orderElement.style.maxHeight = '0';
                orderElement.style.overflow = 'hidden';
                
                setTimeout(() => {
                    orderElement.remove();
                    localStorage.removeItem(`order_${orderId}_first_shown`);
                    
                    // Check if there are any orders left
                    const pendingOrdersList = document.getElementById('pendingOrdersList');
                    if (pendingOrdersList && !pendingOrdersList.querySelector('[data-order-id]')) {
                        const noOrdersElement = document.createElement('p');
                        noOrdersElement.id = 'noPendingOrders';
                        noOrdersElement.className = 'text-gray-500 text-sm';
                        noOrdersElement.textContent = 'Brak oczekujących zamówień';
                        pendingOrdersList.appendChild(noOrdersElement);
                    }
                }, 500);
            }
        }

        // Handle new orders
        function handleNewOrder(order) {
            // Check if order already exists in the view
            if (document.querySelector(`[data-order-id="${order.id}"]`)) {
                return; // Skip if order is already displayed
            }

            const pendingOrdersList = document.getElementById('pendingOrdersList');
            const noOrdersMessage = document.getElementById('noPendingOrders');
            
            // Remove "no orders" message if it exists
            if (noOrdersMessage) {
                noOrdersMessage.remove();
            }

            // Create new order element
            const orderElement = document.createElement('div');
            orderElement.innerHTML = createOrderHtml(order);
            const newOrderNode = orderElement.firstElementChild;
            
            // Add initial styles for animation
            newOrderNode.style.opacity = '0';
            newOrderNode.style.maxHeight = '0';
            newOrderNode.style.overflow = 'hidden';
            newOrderNode.style.transition = 'all 0.5s ease-out';
            
            // Insert at the top of the list
            if (pendingOrdersList.firstChild) {
                pendingOrdersList.insertBefore(newOrderNode, pendingOrdersList.firstChild);
            } else {
                pendingOrdersList.appendChild(newOrderNode);
            }
            
            // Start tracking this new order's time
            getOrderFirstShownTime(order.id);
            
            // Trigger animation
            requestAnimationFrame(() => {
                newOrderNode.style.opacity = '1';
                newOrderNode.style.maxHeight = newOrderNode.scrollHeight + 'px';
            });

            // Clean up styles after animation
            setTimeout(() => {
                newOrderNode.style.maxHeight = 'none';
            }, 500);
        }

        // Template for new orders
        function createOrderHtml(order) {
            return `
                <div class="bg-white shadow overflow-hidden sm:rounded-lg border border-gray-200" data-order-id="${order.id}">
                    <div class="px-4 py-5 sm:px-6">
                        <div class="flex justify-between items-center">
                            <div>
                                <h4 class="text-lg font-medium text-gray-900">Zamówienie #${order.id}</h4>
                                <p class="mt-1 text-sm text-gray-500">
                                    Odbiór: ${formatDateTime(order.pickupTime)}
                                </p>
                            </div>
                            <div class="flex space-x-3">
                                <form method="post" action="/Panel/LaundryOrders" class="inline">
                                    <input type="hidden" name="__RequestVerificationToken" value="${document.querySelector('input[name="__RequestVerificationToken"]').value}" />
                                    <input type="hidden" name="handler" value="Accept" />
                                    <input type="hidden" name="id" value="${order.id}" />
                                    <button type="submit" 
                                            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700">
                                        Akceptuj
                                    </button>
                                </form>
                                <form method="post" action="/Panel/LaundryOrders" class="inline">
                                    <input type="hidden" name="__RequestVerificationToken" value="${document.querySelector('input[name="__RequestVerificationToken"]').value}" />
                                    <input type="hidden" name="handler" value="Decline" />
                                    <input type="hidden" name="id" value="${order.id}" />
                                    <button type="submit" 
                                            class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50">
                                        Odrzuć
                                    </button>
                                </form>
                            </div>
                        </div>
                        <div class="mt-4">
                            <div class="text-sm text-gray-600">
                                <div class="font-medium text-gray-900 mb-2">Zamówione usługi:</div>
                                <ul class="list-disc pl-5 space-y-1">
                                    ${order.items.map(item => `
                                        <li>${item.name} - ${item.quantity} szt. ${item.weight ? `(${item.weight} kg)` : ''} - ${new Intl.NumberFormat('pl-PL', { style: 'currency', currency: 'PLN' }).format(item.price)}</li>
                                    `).join('')}
                                </ul>
                                <div class="mt-3">
                                    <span class="font-medium text-gray-900">Adres odbioru:</span>
                                    <div>${order.pickupAddress.street}${order.pickupAddress.apartmentNumber ? `, m. ${order.pickupAddress.apartmentNumber}` : ''}</div>
                                    <div>${order.pickupAddress.postalCode} ${order.pickupAddress.city}</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', async () => {
            // Wait for the global SignalR connection to be established
            await window.initializeSignalR({
                onNewOrder: handleNewOrder,
                onOrderAccepted: (orderId) => removeExpiredOrder(orderId),
                onOrderDeclined: (orderId) => removeExpiredOrder(orderId)
            });
        });

        async function toggleLaundryStatus() {
            try {
                const response = await fetch('/api/panel/laundry/toggle-status', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    window.location.reload();
                } else {
                    alert('Wystąpił błąd podczas zmiany statusu pralni');
                }
            } catch (err) {
                console.error('Error toggling laundry status:', err);
                alert('Wystąpił błąd podczas zmiany statusu pralni');
            }
        }

        // Debug form submission
        document.addEventListener('DOMContentLoaded', () => {
            const forms = document.querySelectorAll('form[data-debug="confirm-arrival-form"]');
            forms.forEach(form => {
                form.addEventListener('submit', (e) => {
                    console.log('Form submission started');
                    console.log('Form action:', form.action);
                    console.log('Form method:', form.method);
                    const orderId = form.querySelector('input[data-debug="order-id-input"]').value;
                    console.log('Order ID:', orderId);
                    const token = form.querySelector('input[name="__RequestVerificationToken"]').value;
                    console.log('Anti-forgery token present:', !!token);
                });
            });
        });
    </script>
} 